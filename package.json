{
  "name": "divvy-up",
  "version": "1.0.0",
  "description": "Expense splitting application for friends and family",
  "private": true,
  "workspaces": [
    "src/client",
    "src/server",
    "src/shared"
  ],
  "scripts": {
    "dev": "concurrently \"npm run dev:server\" \"npm run dev:client\"",
    "dev:client": "cd src/client && npm run dev",
    "dev:server": "cd src/server && npm run dev",
    "build": "npm run build:shared && npm run build:client && npm run build:server",
    "build:client": "cd src/client && npm run build",
    "build:server": "cd src/server && npm run build",
    "build:shared": "cd src/shared && npm run build",
    "test": "npm run test:client && npm run test:server",
    "test:client": "cd src/client && npm run test",
    "test:server": "cd src/server && npm run test",
    "test:shared": "cd src/shared && npm run test",
    "test:watch": "concurrently \"npm run test:client -- --watch\" \"npm run test:server -- --watch\"",
    "lint": "npm run lint:client && npm run lint:server && npm run lint:shared",
    "lint:client": "cd src/client && npm run lint",
    "lint:server": "cd src/server && npm run lint",
    "lint:shared": "cd src/shared && npm run lint",
    "lint:fix": "npm run lint:client -- --fix && npm run lint:server -- --fix && npm run lint:shared -- --fix",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "format:check": "prettier --check \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "format:client": "prettier --write \"src/client/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "format:server": "prettier --write \"src/server/**/*.{ts,js,json,md}\"",
    "format:shared": "prettier --write \"src/shared/**/*.{ts,js,json,md}\"",
    "code-quality": "npm run format && npm run lint:fix && npm run type-check",
    "type-check": "npm run type-check:client && npm run type-check:server && npm run type-check:shared",
    "type-check:client": "cd src/client && npm run type-check",
    "type-check:server": "cd src/server && npm run type-check",
    "type-check:shared": "cd src/shared && npm run type-check",
    "clean": "npm run clean:client && npm run clean:server && npm run clean:shared",
    "clean:client": "cd src/client && npm run clean",
    "clean:server": "cd src/server && npm run clean",
    "clean:shared": "cd src/shared && npm run clean",
    "install:all": "npm install && npm run install:client && npm run install:server && npm run install:shared",
    "install:client": "cd src/client && npm install",
    "install:server": "cd src/server && npm install",
    "install:shared": "cd src/shared && npm install",
    "docker:dev": "./docker-scripts.sh dev",
    "docker:fullstack": "./docker-scripts.sh fullstack",
    "docker:stop": "./docker-scripts.sh stop",
    "docker:restart": "./docker-scripts.sh restart",
    "docker:logs": "./docker-scripts.sh logs",
    "docker:status": "./docker-scripts.sh status",
    "docker:clean": "./docker-scripts.sh clean",
    "start": "npm run build && npm run start:server",
    "start:server": "cd src/server && npm start",
    "start:client": "cd src/client && npm run preview",
    "dev:full": "npm run docker:dev && npm run dev",
    "dev:client-only": "npm run dev:client",
    "dev:server-only": "npm run dev:server",
    "test:coverage": "npm run test:client:coverage && npm run test:server:coverage && npm run test:shared:coverage",
    "test:client:coverage": "cd src/client && npm run test:coverage",
    "test:server:coverage": "cd src/server && npm run test:coverage",
    "test:shared:coverage": "cd src/shared && npm run test:coverage",
    "test:ci": "npm run test:coverage && npm run lint && npm run type-check",
    "test:debug": "node --inspect-brk node_modules/.bin/jest --runInBand",
    "test:debug:client": "cd src/client && npm run test:debug",
    "test:debug:server": "cd src/server && npm run test:debug",
    "test:debug:shared": "cd src/shared && npm run test:debug",
    "build:prod": "NODE_ENV=production npm run build",
    "build:analyze": "npm run build:client:analyze && npm run build:server:analyze",
    "build:client:analyze": "cd src/client && npm run build:analyze",
    "build:server:analyze": "cd src/server && npm run build:analyze",
    "build:watch": "concurrently \"npm run build:client:watch\" \"npm run build:server:watch\" \"npm run build:shared:watch\"",
    "build:client:watch": "cd src/client && npm run build:watch",
    "build:server:watch": "cd src/server && npm run build:watch",
    "build:shared:watch": "cd src/shared && npm run build:watch",
    "validate": "npm run type-check && npm run lint && npm run test && npm run format:check",
    "validate:fix": "npm run format && npm run lint:fix && npm run type-check",
    "fresh": "npm run clean && npm run install:all && npm run build",
    "fresh:dev": "npm run clean && npm run install:all && npm run dev",
    "check": "npm run type-check && npm run lint && npm run test",
    "check:fix": "npm run format && npm run lint:fix && npm run type-check && npm run test",
    "logs": "npm run docker:logs",
    "status": "npm run docker:status",
    "restart": "npm run docker:restart",
    "stop": "npm run docker:stop",
    "setup": "npm run install:all && npm run docker:dev && npm run build",
    "setup:dev": "npm run install:all && npm run docker:dev",
    "reset": "npm run docker:clean && npm run clean && npm run install:all",
    "health": "curl -s http://localhost:3001/health | jq . || echo 'Server not running'",
    "db:status": "npm run docker:status | grep postgres",
    "redis:status": "npm run docker:status | grep redis",
    "ports": "lsof -i :3000,3001,5432,6379 || echo 'No processes found on target ports'",
    "kill:ports": "lsof -ti :3000,3001,5432,6379 | xargs kill -9 2>/dev/null || echo 'No processes to kill'",
    "debug:client": "cd src/client && npm run dev -- --debug",
    "debug:server": "cd src/server && npm run dev -- --inspect",
    "debug:full": "concurrently \"npm run debug:client\" \"npm run debug:server\"",
    "profile:client": "cd src/client && npm run build && npm run preview",
    "profile:server": "cd src/server && NODE_ENV=production npm start",
    "benchmark": "npm run build && npm run benchmark:server",
    "benchmark:server": "cd src/server && npm run benchmark",
    "docs": "npm run docs:generate && npm run docs:serve",
    "docs:generate": "npm run docs:client && npm run docs:server",
    "docs:client": "cd src/client && npm run docs",
    "docs:server": "cd src/server && npm run docs",
    "docs:serve": "cd docs && python -m http.server 8080 || python3 -m http.server 8080",
    "release": "npm run validate && npm run build:prod && npm run release:version",
        "release:version": "npm version patch && git push && git push --tags",
        "release:minor": "npm version minor && git push && git push --tags",
        "release:major": "npm version major && git push && git push --tags",
        "db:migrate": "cd src/server && npm run db:migrate",
        "db:rollback": "cd src/server && npm run db:rollback",
        "db:status": "cd src/server && npm run db:status",
        "db:seed": "cd src/server && npm run db:seed",
        "db:clear": "cd src/server && npm run db:clear",
        "db:reset": "cd src/server && npm run db:reset"
  },
  "devDependencies": {
    "@types/jest": "^30.0.0",
    "@types/node": "^20.10.5",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "concurrently": "^8.2.2",
    "eslint": "^8.56.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^4.6.2",
    "prettier": "^3.1.1",
    "ts-jest": "^29.4.1",
    "typescript": "^5.3.3"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/your-username/divvy-up.git"
  },
  "keywords": [
    "expense-splitting",
    "group-payments",
    "splitwise-alternative",
    "venmo-groups",
    "react",
    "nodejs",
    "typescript"
  ],
  "author": "Your Name",
  "license": "MIT"
}
